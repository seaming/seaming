// Values from https://sites.uni.edu/morgans/astro/course/Notes/section2/spectraltemps.html
// Colors from http://www.vendian.org/mncharity/dir3/starcolor/ Some values are intermediates
//   calculated from values given there.
const STELLAR_CLASSIFICATION_DATA = [
    {classification: 'A0I', T: 9400, L: 50600},
    {classification: 'A0V', T: 9600, L: 24},
    {classification: 'A1I', T: 9100, L: 44000},
    {classification: 'A1V', T: 9330, L: 20},
    {classification: 'A2I', T: 8900, L: 40000},
    {classification: 'A2V', T: 9040, L: 17},
    {classification: 'A3V', T: 8750, L: 14},
    {classification: 'A4V', T: 8480, L: 12},
    {classification: 'A5I', T: 8300, L: 36000},
    {classification: 'A5V', T: 8310, L: 11},
    {classification: 'A7V', T: 7920, L: 8.8},
    {classification: 'B0I', T: 21000, L: 320000},
    {classification: 'B0V', T: 29200, L: 24000},
    {classification: 'B1I', T: 16000, L: 280000},
    {classification: 'B1V', T: 23000, L: 5550},
    {classification: 'B2I', T: 14000, L: 220000},
    {classification: 'B2V', T: 21000, L: 3190},
    {classification: 'B3I', T: 12800, L: 180000},
    {classification: 'B3V', T: 17600, L: 1060},
    {classification: 'B5I', T: 11500, L: 140000},
    {classification: 'B5V', T: 15200, L: 380},
    {classification: 'B6I', T: 11000, L: 98000},
    {classification: 'B6V', T: 14300, L: 240},
    {classification: 'B7I', T: 10500, L: 82000},
    {classification: 'B7V', T: 13500, L: 140},
    {classification: 'B8I', T: 10000, L: 73000},
    {classification: 'B8V', T: 12300, L: 73},
    {classification: 'B9I', T: 9700, L: 61000},
    {classification: 'B9V', T: 11400, L: 42},
    {classification: 'F0I', T: 7500, L: 20000},
    {classification: 'F0V', T: 7350, L: 5.1},
    {classification: 'F2I', T: 7200, L: 18000},
    {classification: 'F2V', T: 7050, L: 3.8},
    {classification: 'F3V', T: 6850, L: 3.2},
    {classification: 'F5I', T: 6800, L: 16000},
    {classification: 'F5V', T: 6700, L: 2.7},
    {classification: 'F6V', T: 6550, L: 2},
    {classification: 'F7V', T: 6400, L: 1.5},
    {classification: 'F8I', T: 6150, L: 12000},
    {classification: 'F8V', T: 6300, L: 1.4},
    {classification: 'G0I', T: 5800, L: 9600},
    {classification: 'G0V', T: 6050, L: 1.2},
    {classification: 'G1V', T: 5930, L: 1.1},
    {classification: 'G2I', T: 5500, L: 9500},
    {classification: 'G2V', T: 5800, L: 1},
    {classification: 'G5I', T: 5100, L: 9800},
    {classification: 'G5III', T: 5010, L: 127},
    {classification: 'G5V', T: 5660, L: 0.73},
    {classification: 'G8I', T: 5050, L: 11000},
    {classification: 'G8III', T: 4870, L: 113},
    {classification: 'G8V', T: 5440, L: 0.51},
    {classification: 'K0I', T: 4900, L: 12000},
    {classification: 'K0III', T: 4720, L: 96},
    {classification: 'K0V', T: 5240, L: 0.38},
    {classification: 'K1I', T: 4700, L: 13500},
    {classification: 'K1III', T: 4580, L: 82},
    {classification: 'K1V', T: 5110, L: 0.32},
    {classification: 'K2I', T: 4500, L: 15200},
    {classification: 'K2III', T: 4460, L: 70},
    {classification: 'K2V', T: 4960, L: 0.29},
    {classification: 'K3I', T: 4300, L: 17000},
    {classification: 'K3III', T: 4210, L: 58},
    {classification: 'K3V', T: 4800, L: 0.24},
    {classification: 'K4I', T: 4100, L: 18300},
    {classification: 'K4III', T: 4010, L: 45},
    {classification: 'K4V', T: 4600, L: 0.18},
    {classification: 'K5I', T: 3750, L: 20000},
    {classification: 'K5III', T: 3780, L: 32},
    {classification: 'K5V', T: 4400, L: 0.15},
    {classification: 'K7V', T: 4000, L: 0.11},
    {classification: 'M0I', T: 3660, L: 50600},
    {classification: 'M0III', T: 3660, L: 15},
    {classification: 'M0V', T: 3750, L: 0.08},
    {classification: 'M1I', T: 3600, L: 52000},
    {classification: 'M1III', T: 3600, L: 13},
    {classification: 'M1V', T: 3700, L: 0.055},
    {classification: 'M2I', T: 3500, L: 53000},
    {classification: 'M2III', T: 3500, L: 11},
    {classification: 'M2V', T: 3600, L: 0.035},
    {classification: 'M3I', T: 3300, L: 54000},
    {classification: 'M3III', T: 3300, L: 9.5},
    {classification: 'M3V', T: 3500, L: 0.027},
    {classification: 'M4I', T: 3100, L: 56000},
    {classification: 'M4III', T: 3100, L: 7.4},
    {classification: 'M4V', T: 3400, L: 0.022},
    {classification: 'M5I', T: 2950, L: 58000},
    {classification: 'M5III', T: 2950, L: 5.1},
    {classification: 'M5V', T: 3200, L: 0.011},
    {classification: 'M6III', T: 2800, L: 3.3},
    {classification: 'M6V', T: 3100, L: 0.0051},
    {classification: 'M7V', T: 2900, L: 0.0032},
    {classification: 'M8V', T: 2700, L: 0.002},
    {classification: 'O5V', T: 54000, L: 200000},
    {classification: 'O6V', T: 45000, L: 140000},
    {classification: 'O7V', T: 43300, L: 120000},
    {classification: 'O8V', T: 40600, L: 80000},
    {classification: 'O9V', T: 37800, L: 55000},
];

function stellar_classification(T,L) {
    // Note that this function assumes the incoming luminosity is in solar luminosities.
    var x = STELLAR_CLASSIFICATION_DATA.sort((a,b) => {
        var a_dist = Math.pow(a.T-T, 2) + Math.pow(a.L-L, 2);
        var b_dist = Math.pow(b.T-T, 2) + Math.pow(b.L-L, 2);
        return a_dist - b_dist;
    })[0];
    x.color = blackbody_color(T);
    return x;
}

const BLACKBODY_COLOR_DATA = [
    [1000, '#ff3800'],
    [1200, '#ff5300'],
    [1400, '#ff6500'],
    [1600, '#ff7300'],
    [1800, '#ff7e00'],
    [2000, '#ff8912'],
    [2200, '#ff932c'],
    [2400, '#ff9d3f'],
    [2600, '#ffa54f'],
    [2800, '#ffad5e'],
    [3000, '#ffb46b'],
    [3200, '#ffbb78'],
    [3400, '#ffc184'],
    [3600, '#ffc78f'],
    [3800, '#ffcc99'],
    [4000, '#ffd1a3'],
    [4200, '#ffd5ad'],
    [4400, '#ffd9b6'],
    [4600, '#ffddbe'],
    [4800, '#ffe1c6'],
    [5000, '#ffe4ce'],
    [5200, '#ffe8d5'],
    [5400, '#ffebdc'],
    [5600, '#ffeee3'],
    [5800, '#fff0e9'],
    [6000, '#fff3ef'],
    [6200, '#fff5f5'],
    [6400, '#fff8fb'],
    [6600, '#fef9ff'],
    [6800, '#f9f6ff'],
    [7000, '#f5f3ff'],
    [7200, '#f0f1ff'],
    [7400, '#edefff'],
    [7600, '#e9edff'],
    [7800, '#e6ebff'],
    [8000, '#e3e9ff'],
    [8200, '#e0e7ff'],
    [8400, '#dde6ff'],
    [8600, '#dae4ff'],
    [8800, '#d8e3ff'],
    [9000, '#d6e1ff'],
    [9200, '#d3e0ff'],
    [9400, '#d1dfff'],
    [9600, '#cfddff'],
    [9800, '#cedcff'],
    [10000, '#ccdbff'],
    [10200, '#cadaff'],
    [10400, '#c9d9ff'],
    [10600, '#c7d8ff'],
    [10800, '#c6d8ff'],
    [11000, '#c4d7ff'],
    [11200, '#c3d6ff'],
    [11400, '#c2d5ff'],
    [11600, '#c1d4ff'],
    [11800, '#c0d4ff'],
    [12000, '#bfd3ff'],
    [12200, '#bed2ff'],
    [12400, '#bdd2ff'],
    [12600, '#bcd1ff'],
    [12800, '#bbd1ff'],
    [13000, '#bad0ff'],
    [13200, '#b9d0ff'],
    [13400, '#b8cfff'],
    [13600, '#b7cfff'],
    [13800, '#b7ceff'],
    [14000, '#b6ceff'],
    [14200, '#b5cdff'],
    [14400, '#b5cdff'],
    [14600, '#b4ccff'],
    [14800, '#b3ccff'],
    [15000, '#b3ccff'],
    [15200, '#b2cbff'],
    [15400, '#b2cbff'],
    [15600, '#b1caff'],
    [15800, '#b1caff'],
    [16000, '#b0caff'],
    [16200, '#afc9ff'],
    [16400, '#afc9ff'],
    [16600, '#afc9ff'],
    [16800, '#aec9ff'],
    [17000, '#aec8ff'],
    [17200, '#adc8ff'],
    [17400, '#adc8ff'],
    [17600, '#acc7ff'],
    [17800, '#acc7ff'],
    [18000, '#acc7ff'],
    [18200, '#abc7ff'],
    [18400, '#abc6ff'],
    [18600, '#aac6ff'],
    [18800, '#aac6ff'],
    [19000, '#aac6ff'],
    [19200, '#a9c6ff'],
    [19400, '#a9c5ff'],
    [19600, '#a9c5ff'],
    [19800, '#a9c5ff'],
    [20000, '#a8c5ff'],
    [20200, '#a8c5ff'],
    [20400, '#a8c4ff'],
    [20600, '#a7c4ff'],
    [20800, '#a7c4ff'],
    [21000, '#a7c4ff'],
    [21200, '#a7c4ff'],
    [21400, '#a6c3ff'],
    [21600, '#a6c3ff'],
    [21800, '#a6c3ff'],
    [22000, '#a6c3ff'],
    [22200, '#a5c3ff'],
    [22400, '#a5c3ff'],
    [22600, '#a5c3ff'],
    [22800, '#a5c2ff'],
    [23000, '#a4c2ff'],
    [23200, '#a4c2ff'],
    [23400, '#a4c2ff'],
    [23600, '#a4c2ff'],
    [23800, '#a4c2ff'],
    [24000, '#a3c2ff'],
    [24200, '#a3c1ff'],
    [24400, '#a3c1ff'],
    [24600, '#a3c1ff'],
    [24800, '#a3c1ff'],
    [25000, '#a3c1ff'],
    [25200, '#a2c1ff'],
    [25400, '#a2c1ff'],
    [25600, '#a2c1ff'],
    [25800, '#a2c1ff'],
    [26000, '#a2c0ff'],
    [26200, '#a2c0ff'],
    [26400, '#a1c0ff'],
    [26600, '#a1c0ff'],
    [26800, '#a1c0ff'],
    [27000, '#a1c0ff'],
    [27200, '#a1c0ff'],
    [27400, '#a1c0ff'],
    [27600, '#a1c0ff'],
    [27800, '#a0c0ff'],
    [28000, '#a0bfff'],
    [28200, '#a0bfff'],
    [28400, '#a0bfff'],
    [28600, '#a0bfff'],
    [28800, '#a0bfff'],
    [29000, '#a0bfff'],
    [29200, '#a0bfff'],
    [29400, '#9fbfff'],
    [29600, '#9fbfff'],
    [29800, '#9fbfff'],
]

function blackbody_color(T) {
    var i = BLACKBODY_COLOR_DATA.findIndex(x => x[0] > T);
    if (i == 0)
        return BLACKBODY_COLOR_DATA[0][1];
    else if (i == -1)
        return BLACKBODY_COLOR_DATA.at(-1)[1];

    var [T1,c1] = BLACKBODY_COLOR_DATA[i-1];
    var [T2,c2] = BLACKBODY_COLOR_DATA[i];
    return blend_colors(c1, c2, (T-T1)/(T2-T1));
}

function hex_to_RGB(hex) {
    var [r,g,b] = hex.match(/\w\w/g).map((c) => parseInt(c, 16));
    return { r:r, g:g, b:b };
}

function RGB_to_hex(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

function blend_colors(a, b, blend) {
    var a = hex_to_RGB(a);
    var b = hex_to_RGB(b);
    return RGB_to_hex(
        Math.round(a.r * blend + (1 - blend) * b.r),
        Math.round(a.g * blend + (1 - blend) * b.g),
        Math.round(a.b * blend + (1 - blend) * b.b),
    );
}